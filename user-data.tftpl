#cloud-config
hostname: ${HOSTNAME}
disable_root: false
network:
  config: disabled
users:
  - name: ${USERNAME}
    groups: users, admin, docker, sudo
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    lock_passwd: false
    passwd: "$6$rounds=4096$saltsaltlettuce$Lp/FV.2oOgew7GbM6Nr8KMGMBn7iFM0x9ZwLqtx9Y4QJmKvfcnS.2zx4MKmymCPQGpHS7gqYOiqWjvdCIV2uN."
    ssh_import_id:
      - gh:${GITHUB_USERNAME}
mounts:
  - [ "/dev/nvme1n1", "/data", "ext4", "defaults,nofail", "0", "2" ]
bootcmd:
  - test -z "$(blkid /dev/nvme1n1)" && mkfs -t ext4 -L data /dev/nvme1n1
  - mkdir -p /data
write_files:
- path: /etc/apt/sources.list
  content: |
    deb http://deb.debian.org/debian bookworm main contrib non-free non-free-firmware
    deb-src http://deb.debian.org/debian bookworm main contrib non-free non-free-firmware
    deb http://deb.debian.org/debian-security/ bookworm-security main contrib non-free
    deb-src http://deb.debian.org/debian-security/ bookworm-security main contrib non-free
    deb http://deb.debian.org/debian bookworm-updates main contrib non-free
    deb-src http://deb.debian.org/debian bookworm-updates main contrib non-free
    deb http://deb.debian.org/debian bookworm-backports main
    deb http://deb.debian.org/debian bullseye-backports main
- path: /home/${username}/.config/systemd/user/sunshine.service
  content: |
    [Unit]
    Description=Sunshine self-hosted game stream host for Moonlight.
    StartLimitIntervalSec=500
    StartLimitBurst=5

    [Service]
    ExecStart=/usr/bin/sunshine
    Restart=on-failure
    RestartSec=5s

    [Install]
    WantedBy=graphical-session.target

    package_update: true
    package_upgrade: true
packages:
  - sudo
  - curl
  - tmux
  - pkg-config
  - libvulkan1
  - rsync
  - zip
  - wireguard
  - ssh-import-id
  - sudo
  - curl
  - tmux
  - netplan.io
  - apt-transport-https
  - ca-certificates
  - software-properties-common
  - htop
  - git-extras
  - rsyslog
  - fail2ban
  - neovim
  - gpg
  - open-iscsi
  - nfs-common
  - ncdu
  - zip
  - unzip
  - pkg-config
  - iotop
  - tasksel
  - build-essential
  - dkms
  - mdevctl
  - firmware-misc-nonfree
  - linux-headers-amd64
  - gcc
  - make
  - libvulkan1
  - libglvnd-dev
  - uuid-runtime
  - firmware-misc-nonfree
  - linux-headers-amd64
  - gcc
  - libvulkan1
  - libglvnd-dev
  - x11vnc
  - dbus-x11
  - xinit
  - xorg
  - xvfb
runcmd:
  - sudo apt-get install -y linux-headers-`uname -r`
  - ssh-import-id-gh ${GITHUB_USERNAME}
  ######################
  # Install YQ
  - wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq &&\
  - chmod +x /usr/bin/yq
  ######################
  # Install Docker
  - sudo chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  - sudo apt-get update
  - sudo apt-get install -y docker-ce
  ########################
  # Install Docker Compose
  - sudo -u ${USERNAME} -i mkdir -p /home/${USERNAME}/.docker/cli-plugins/
  - sudo -u ${USERNAME} -i curl -SL https://github.com/docker/compose/releases/download/v2.17.3/docker-compose-linux-x86_64 -o  /home/${USERNAME}/.docker/cli-plugins/docker-compose
  - sudo chmod +x /home/${USERNAME}/.docker/cli-plugins/docker-compose
  ########################
  # Brew and Python3
  - wget https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
  - chmod +x /install.sh
  - chmod 777 /install.sh
  - sudo -u ${USERNAME} NONINTERACTIVE=1 /bin/bash /install.sh
  - sudo -u ${USERNAME} /home/linuxbrew/.linuxbrew/bin/brew shellenv >> /home/${USERNAME}/.profile
  - sudo -u ${USERNAME} /home/linuxbrew/.linuxbrew/opt/python@3.11/libexec/bin >> /home/${USERNAME}/.profile
  - sudo chown -R ${USERNAME}:${USERNAME} /home/linuxbrew
  - sudo chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}
  ########################
  # Start system services
  - systemctl daemon-reload
  - sudo systemctl enable fail2ban
  - sudo systemctl start fail2ban
  ########################
  # AWS CLI
  - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  - unzip awscliv2.zip
  - sudo ./aws/install
  ########################
  # Nvidia driver
  - echo -e "allowed_users=anybody\nneeds_root_rights=yes" | sudo tee /etc/X11/Xwrapper.config > /dev/null
  - wget curl https://raw.githubusercontent.com/GoogleCloudPlatform/compute-gpu-installation/main/linux/install_gpu_driver.py -O install_gpu_driver.py
  - python3 install_gpu_driver.py
  ########################
  # Container Runtime
  - |
    distribution=debian11 && \
    curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg && \
    curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | \
      sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
      sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
  - apt-get update
  - apt-get install -y nvidia-container-toolkit
  - nvidia-ctk runtime configure --runtime=docker --set-as-default
  - systemctl restart docker
  #########################
  # Desktop
  - DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC sudo tasksel install xfce-desktop
